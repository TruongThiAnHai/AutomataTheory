//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Automata.sm
//

#include "AppClass.h"
#include "Automata_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_FirstState Map1::FirstState("Map1::FirstState", 1);
Map1_StateA Map1::StateA("Map1::StateA", 2);
Map1_StateB Map1::StateB("Map1::StateB", 3);
Map1_User Map1::User("Map1::User", 4);
Map1_Server Map1::Server("Map1::Server", 5);
Map1_ZoneorDomain Map1::ZoneorDomain("Map1::ZoneorDomain", 6);
Map1_Ending Map1::Ending("Map1::Ending", 7);
Map1_OK Map1::OK("Map1::OK", 8);
Map1_Error Map1::Error("Map1::Error", 9);

void AppClassState::At(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Colon(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Devider(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Dot(AutomataContext& context)
{
    Default(context);
}

void AppClassState::EOS(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Letter(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Slash(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AutomataContext& context)
{
    Default(context);
}

void AppClassState::Default(AutomataContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Default::Devider(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::EOS(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::Dot(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::At(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::Slash(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::Colon(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Default::Unknown(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.pushHeadline();
        context.setState(Map1::FirstState);
    }
    catch (...)
    {
        context.setState(Map1::FirstState);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_FirstState::Colon(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.check();
        context.setState(Map1::StateA);
    }
    catch (...)
    {
        context.setState(Map1::StateA);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_FirstState::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.pushHeadline();
        context.setState(Map1::FirstState);
    }
    catch (...)
    {
        context.setState(Map1::FirstState);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_StateA::Slash(AutomataContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::StateB);
    context.getState().Entry(context);

}

void Map1_StateB::Slash(AutomataContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::User);
    context.getState().Entry(context);

}

void Map1_User::At(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.clear();
        context.setState(Map1::Server);
    }
    catch (...)
    {
        context.setState(Map1::Server);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_User::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.add();
        ctxt.inc();
        ctxt.less(20);
        context.setState(Map1::User);
    }
    catch (...)
    {
        context.setState(Map1::User);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Server::Dot(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.checkServer();
        ctxt.clear();
        ctxt.incDot();
        context.setState(Map1::ZoneorDomain);
    }
    catch (...)
    {
        context.setState(Map1::ZoneorDomain);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Server::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.inc();
        ctxt.less(20);
        context.setState(Map1::Server);
    }
    catch (...)
    {
        context.setState(Map1::Server);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_ZoneorDomain::Devider(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.checkZone();
        context.setState(Map1::Ending);
    }
    catch (...)
    {
        context.setState(Map1::Ending);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_ZoneorDomain::Dot(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.clear();
        ctxt.checkDot();
        ctxt.incDot();
        context.setState(Map1::ZoneorDomain);
    }
    catch (...)
    {
        context.setState(Map1::ZoneorDomain);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_ZoneorDomain::EOS(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.checkZone();
        context.setState(Map1::Ending);
    }
    catch (...)
    {
        context.setState(Map1::Ending);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_ZoneorDomain::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.clearDot();
        ctxt.inc();
        ctxt.less(21);
        context.setState(Map1::ZoneorDomain);
    }
    catch (...)
    {
        context.setState(Map1::ZoneorDomain);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Ending::Devider(AutomataContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Ending);
    context.getState().Entry(context);

}

void Map1_Ending::EOS(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::At(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Colon(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Devider(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Dot(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::EOS(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Letter(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Slash(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Unknown(AutomataContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::Error);
    }
    catch (...)
    {
        context.setState(Map1::Error);
        throw;
    }
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
