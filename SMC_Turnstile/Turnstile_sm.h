//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Turnstile.sm
//

#ifndef TURNSTILE_SM_H
#define TURNSTILE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace turnstile
{
    // Forward declarations.
    class MainMap;
    class MainMap_Locked;
    class MainMap_Unlocked;
    class MainMap_Default;
    class TurnstileState;
    class TurnstileContext;
    class Turnstile;

    class TurnstileState :
        public statemap::State
    {
    public:

        TurnstileState(const char * const name, const int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(TurnstileContext&) {};
        virtual void Exit(TurnstileContext&) {};

        virtual void coin(TurnstileContext& context);
        virtual void pass(TurnstileContext& context);

    protected:

        virtual void Default(TurnstileContext& context);
    };

    class MainMap
    {
    public:

        static MainMap_Locked Locked;
        static MainMap_Unlocked Unlocked;
    };

    class MainMap_Default :
        public TurnstileState
    {
    public:

        MainMap_Default(const char * const name, const int stateId)
        : TurnstileState(name, stateId)
        {};

    };

    class MainMap_Locked :
        public MainMap_Default
    {
    public:
        MainMap_Locked(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void coin(TurnstileContext& context);
        virtual void pass(TurnstileContext& context);
    };

    class MainMap_Unlocked :
        public MainMap_Default
    {
    public:
        MainMap_Unlocked(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void coin(TurnstileContext& context);
        virtual void pass(TurnstileContext& context);
    };

    class TurnstileContext :
        public statemap::FSMContext
    {
    public:

        explicit TurnstileContext(Turnstile& owner)
        : FSMContext(MainMap::Locked),
          _owner(owner)
        {};

        TurnstileContext(Turnstile& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        inline Turnstile& getOwner()
        {
            return (_owner);
        };

        inline TurnstileState& getState()
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return dynamic_cast<TurnstileState&>(*_state);
        };

        inline void coin()
        {
            getState().coin(*this);
        };

        inline void pass()
        {
            getState().pass(*this);
        };

    private:
        Turnstile& _owner;
    };
}


#endif // TURNSTILE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
